<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>hotDesk</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="/stylesheets/home.css">
</head>
<body class="d-flex text-center">

    <div class="container text-center w-100 h-100 mx-auto p-3 d-flex flex-column text-white">
        <header class="my-auto">
            <h1 class="display-3">Welcome to hotDesk</h1>
            <h5 class="text-light">Stay organised. Stay connected. <em>Stay safe.</em></h3>

            <h3 class="display-6 mt-5 mb-3">I am...</h3>
            
            <a href="/login" class="btn btn-lg btn-outline-light m-3">An employer</a>
            <a href="/login" class="btn btn-lg btn-outline-light m-3">An employee</a>
            

            <div class="container">
                <!-- <a href="/" class="btn btn-outline-warning btn-sm mt-5" >Learn more</a> -->

                <button type="button" class="btn btn-outline-warning btn-sm mt-5" data-bs-toggle="modal" data-bs-target="#exampleModal">
                    Learn More
                </button>

            </div>
        </header>
        
        
    </div>
    

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
</body>
</html>



  <!-- Modal -->
  <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">hotDesk README</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <h2>Hot Desk readme</h2>

          <h4> Introduction:</h4>

          <p>HotDesk is a full-stack, express application designed for employees to book
            desks in flexible office locations provided by their employer. I chose this
            project as an example of an application required in today’s hybrid-model working
            world, where employees split their time between office and home working. The app
            is built predominantly with node.js, express, mongoose, mongoDB and EJS.</p>

          <p>The main features of the application are as follows:</p>

          <p>Users are able to register for two types of accounts: employer and employees.
            The registration of both types of users is handled by passport.js.</p>

           <h4>Employer Functions:</h4>

          <ul>
            <li>Employers are able to add as many offices as required. When registering an
              office, users are prompted to add: office name, address, a floorplan image,
              and to select the number of bookable desks. Using the mapbox geocoding
              service, the address will be forward-geocoded to provide latitude and
              longitude co-ordinates, to show the office location on a mapbox map.</li>

            <li>All office data can be edited at any time, including increasing/decreasing the
              number of desks – if the number of desks is reduced, all relevant data is
              removed from the database such as bookings on removed desks.</li>

            <li>Before being stored on the database, a salt is added to the passcode and then
              hashed using bcrypt to prevent any unwanted users from being able to register
              with a company information from the database is compromised.</li>

            <li>Employers are also given access to an admin page that provides information on
              all registered users of a company, and all bookings across all offices,
              including username. From this page, admins can nominate additional employees
              to be granted admin permissions, providing nominee access to the admin panel,
              and the ability to change other user permissions, add, edit and delete
              offices, and edit and delete the company. Admin users cannot change their own
              status, or delete their own accounts, ensuring that a company is not be left
              without at least one admin user.</li>
          </ul>

          <h4>Employee Functions:</h4>

         <ul>
          <li>When an employee signs up, they must provide the correct company code and
            passcode before being able to successfully register. Once registered, users
            are directed to their company page, where offices are listed.</li>

          <li> When viewing an office, employees are able to select a desk, a date and a
            session (AM or PM) and make a booking, or delete previous bookings. There are
            both a client-side scripts and server-side middleware to ensure that a desk
            cannot be double booked, even if forced through with an application such as
            postman.</li>

          <li>Employees are able to view all bookings made for an office, however they
            cannot see who has booked them, and can only delete bookings made by
            themselves. There is also a ‘my bookings’ page that lists all bookings an
            employee has made across all sites.</li>
         </ul>

          <h4>General Functionality:</h4>

          <p>To avoid storing unnecessary data, the package cron is used to run a function
            that deletes old bookings each night at midnight. The function deletes any
            bookings more than three days out of date. I have elected to keep bookings for
            three days post their booking date for employee convenience, for such times when
            employees need to recollect where they have worked i.e. for lost property etc.</p>

          <h4>My Biggest Learnings:</h4>

          <p>The biggest flaw in my app is that bookings do not display in chronological
            order. After trying myriad mongoose methods to sort the data as it is passed
            from the database, and further researching the issue, I discovered this is a
            longstanding known bug in mongoose.</p>

         <p> As I had used the populate method to request subdocuments from the office
          document, they cannot be sorted using the mongoose sort method because of
          previous issues with data fields being crossed upon sorting.</p>

          <p>Because bookings are likely to be made in the near future only, the
            non-chronological display of bookings is an annoying issue, but not a
            functionally detrimental one. I considered limiting bookings so that a desk can
            only be booked 7 days in advance to minimise the list of non-chronological
            dates, but decided against it because I believe users prefer a less restrictive
            experience.</p>

          <h4>Future Improvements:</h4>

          <p>Whilst the application is functional and finished (for now!), there are
            additional features I would like to add to enhance useability,as follows:</p>

         <ol>
          <li>To allow further flexibility with booking desks, I would change the AM/PM
            booking system to a start/finish time style. This would enable more than two
            bookings per desk per day and would be especially useful for offices that are
            in use 24-hours.</li>

        <li>The ability to book meeting rooms in addition to desks, also with
          start/finish time functionality.</li>

        <li>From a security perspective, a beneficial and necessary feature for
          production use would be the ability to change a company passcode. This could
          be taken one step further, with an inbuilt requirement that the company
          passcode be changed at least every 90 days.</li>
         </ol>
        </div>
        <!-- <div class="modal-footer">
          <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
        </div> -->
      </div>
    </div>
  </div>